{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Artificial Neural Network",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/QamarAlkhatib/AI-neuralNetwork-Regression/blob/main/CCPP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3cbb7fRy-eyr"
      },
      "source": [
        "# Artificial Neural Network"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8sNDnxE2-pwE"
      },
      "source": [
        "### Importing the libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g9shUehyX9oL"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "6hDJO2_oX_3D",
        "outputId": "915fcb6d-2467-48d8-f457-5304b944c1c3"
      },
      "source": [
        "tf.__version__"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'2.5.0'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AG3FQEch-yuA"
      },
      "source": [
        "## Part 1 - Data Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-4zq8Mza_D9O"
      },
      "source": [
        "### Importing the dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rlzQcPZAY9GV"
      },
      "source": [
        "dataset = pd.read_excel('Folds5x2_pp.xlsx') \n",
        "X = dataset.iloc[:, :-1].values\n",
        "y = dataset.iloc[:, -1].values #dependent variable to predict (last column EP)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xRCYWTxdV00u",
        "outputId": "3f0c7be6-8223-4731-afb2-53a7591e8080"
      },
      "source": [
        "# in case you want to see the output\n",
        "print(X)\n",
        "print(y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[  14.96   41.76 1024.07   73.17]\n",
            " [  25.18   62.96 1020.04   59.08]\n",
            " [   5.11   39.4  1012.16   92.14]\n",
            " ...\n",
            " [  31.32   74.33 1012.92   36.48]\n",
            " [  24.48   69.45 1013.86   62.39]\n",
            " [  21.6    62.52 1017.23   67.87]]\n",
            "[463.26 444.37 488.56 ... 429.57 435.74 453.28]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VC6omXel_Up0"
      },
      "source": [
        "### Splitting the dataset into the Training set and Test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OTipu9ftWU4_"
      },
      "source": [
        "from sklearn.model_selection import train_test_split  # this function that will take as input the data set but not in the form of the data frame, in the form of the two subset X, matrix features and y the dependent variable vector \n",
        "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) \n",
        "#test_size we will take less than 2000 out of 9568 data observation in the data set\n",
        "#random_state will fix the randomness in case to have exactly the same split of the training set and the test set"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_mSLlAT9_eyI"
      },
      "source": [
        "## Part 2 - Building the ANN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CsBULd_f_wLY"
      },
      "source": [
        "### Initializing the ANN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V6fmMLqXZI6p"
      },
      "source": [
        "ann = tf.keras.models.Sequential()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iitAFJS_ABUn"
      },
      "source": [
        "### Adding the input layer and the first hidden layer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d7VHhvhsbGma"
      },
      "source": [
        "ann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n",
        "# Dense is for the connection between the input layer and the first hidden layer "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-lb4kK_wAKbs"
      },
      "source": [
        "### Adding the second hidden layer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sLaYJ0DteJTb"
      },
      "source": [
        "ann.add(tf.keras.layers.Dense(units=6, activation='relu'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jwMOmKb3AdBY"
      },
      "source": [
        "### Adding the output layer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8N6W4s7ieLiz"
      },
      "source": [
        "ann.add(tf.keras.layers.Dense(units=1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fq7e4fF6A1yy"
      },
      "source": [
        "## Part 3 - Training the ANN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qDeylAs2An25"
      },
      "source": [
        "### Compiling the ANN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PS8rFbSGgbhr"
      },
      "source": [
        "ann.compile(optimizer = 'adam', loss = 'mean_squared_error')\n",
        "#Adam is the most popular optimizer when we want to use the gradient descent algo and it will reduse the loss between the predictions and real results"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YjVuiybYOo7r"
      },
      "source": [
        "### Training the ANN model on the Training set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-9jaxQyth8bs",
        "outputId": "d5cdea9f-a017-4cf9-82fe-2ea2ead80fc7"
      },
      "source": [
        "ann.fit(x_train, y_train, batch_size = 32 ,epochs = 100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "240/240 [==============================] - 1s 1ms/step - loss: 76411.6406\n",
            "Epoch 2/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 154.1005\n",
            "Epoch 3/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 120.9619\n",
            "Epoch 4/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 118.0383\n",
            "Epoch 5/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 114.5861\n",
            "Epoch 6/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 110.7399\n",
            "Epoch 7/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 106.5291\n",
            "Epoch 8/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 102.0437\n",
            "Epoch 9/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 97.5763\n",
            "Epoch 10/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 92.6666\n",
            "Epoch 11/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 87.8586\n",
            "Epoch 12/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 83.0338\n",
            "Epoch 13/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 78.4865\n",
            "Epoch 14/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 74.0123\n",
            "Epoch 15/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 69.7364\n",
            "Epoch 16/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 65.7221\n",
            "Epoch 17/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 62.4298\n",
            "Epoch 18/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 59.3493\n",
            "Epoch 19/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 56.3465\n",
            "Epoch 20/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 53.7394\n",
            "Epoch 21/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 51.4539\n",
            "Epoch 22/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 49.5534\n",
            "Epoch 23/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 47.9950\n",
            "Epoch 24/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 46.0972\n",
            "Epoch 25/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 44.6467\n",
            "Epoch 26/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 42.9197\n",
            "Epoch 27/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 41.8717\n",
            "Epoch 28/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 40.4532\n",
            "Epoch 29/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 39.7769\n",
            "Epoch 30/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 38.4684\n",
            "Epoch 31/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 37.5363\n",
            "Epoch 32/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 36.1051\n",
            "Epoch 33/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 35.3567\n",
            "Epoch 34/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 34.3779\n",
            "Epoch 35/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 34.0472\n",
            "Epoch 36/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 33.0599\n",
            "Epoch 37/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 32.0841\n",
            "Epoch 38/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 31.4849\n",
            "Epoch 39/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 31.0056\n",
            "Epoch 40/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 30.5975\n",
            "Epoch 41/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 30.1363\n",
            "Epoch 42/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 29.6893\n",
            "Epoch 43/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 29.0724\n",
            "Epoch 44/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 28.7449\n",
            "Epoch 45/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 28.4964\n",
            "Epoch 46/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.9441\n",
            "Epoch 47/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.8240\n",
            "Epoch 48/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.8047\n",
            "Epoch 49/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.8784\n",
            "Epoch 50/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.4857\n",
            "Epoch 51/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.5498\n",
            "Epoch 52/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.2992\n",
            "Epoch 53/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.0821\n",
            "Epoch 54/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.1579\n",
            "Epoch 55/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9323\n",
            "Epoch 56/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.0403\n",
            "Epoch 57/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.7988\n",
            "Epoch 58/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.3957\n",
            "Epoch 59/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6628\n",
            "Epoch 60/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.2708\n",
            "Epoch 61/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.1728\n",
            "Epoch 62/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.5399\n",
            "Epoch 63/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.8575\n",
            "Epoch 64/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6211\n",
            "Epoch 65/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.4681\n",
            "Epoch 66/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.7910\n",
            "Epoch 67/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9011\n",
            "Epoch 68/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.3920\n",
            "Epoch 69/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.0245\n",
            "Epoch 70/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.3120\n",
            "Epoch 71/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9086\n",
            "Epoch 72/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.0645\n",
            "Epoch 73/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.8475\n",
            "Epoch 74/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6868\n",
            "Epoch 75/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.7713\n",
            "Epoch 76/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9738\n",
            "Epoch 77/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.1177\n",
            "Epoch 78/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9642\n",
            "Epoch 79/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6777\n",
            "Epoch 80/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.1336\n",
            "Epoch 81/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6961\n",
            "Epoch 82/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.3666\n",
            "Epoch 83/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.5937\n",
            "Epoch 84/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.5061\n",
            "Epoch 85/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.1317\n",
            "Epoch 86/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.5383\n",
            "Epoch 87/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.8769\n",
            "Epoch 88/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.4064\n",
            "Epoch 89/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.8154\n",
            "Epoch 90/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9948\n",
            "Epoch 91/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6665\n",
            "Epoch 92/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.3250\n",
            "Epoch 93/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.6953\n",
            "Epoch 94/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.0011\n",
            "Epoch 95/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.4797\n",
            "Epoch 96/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.9114\n",
            "Epoch 97/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.3295\n",
            "Epoch 98/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.1325\n",
            "Epoch 99/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 27.2747\n",
            "Epoch 100/100\n",
            "240/240 [==============================] - 0s 1ms/step - loss: 26.7217\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7ff4c0b9ad10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0H0zKKNEBLD5"
      },
      "source": [
        "### Predicting the results of the Test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oz09lIsJjDZG",
        "outputId": "3fcfa68c-9035-4c6a-a36c-1059a21289e3"
      },
      "source": [
        "y_pred = ann.predict(x_test)\n",
        "np.set_printoptions(precision=2)\n",
        "print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)), 1))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[431.51 431.23]\n",
            " [462.52 460.01]\n",
            " [466.29 461.14]\n",
            " ...\n",
            " [473.33 473.26]\n",
            " [439.81 438.  ]\n",
            " [459.18 463.28]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}